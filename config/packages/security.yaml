security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: auto

    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: app_user_provider
            custom_authenticators:
                - App\Security\AppAuthenticator
            logout:
                path: app_logout
                invalidate_session: true
            stateless: false
            form_login:
                login_path: app_login
                check_path: app_login
            entry_point: form_login

            # Note: Pas de redirection ici


        # Firewall pour g√©rer l'authentification JWT via JSON Login
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern: ^/api
            stateless: true
            jwt: ~


    access_control:
        - { path: ^/logout, roles: PUBLIC_ACCESS }  # Allow public access to logout

        - { path: ^/login, roles: PUBLIC_ACCESS  }
        - { path: ^/property/api, roles: PUBLIC_ACCESS } # Public access for /property/api
        - { path: ^/admin, roles: ROLE_ADMIN } # Admin access to all admin pages
        - { path: ^/agence, roles: [ ROLE_ADMIN, ROLE_AGENCE ,ROLE_AGENT] } # Admin and Agence roles
        - { path: ^/user, roles: [ ROLE_ADMIN, ROLE_AGENCE ] } # Admin and Agence roles
        - { path: ^/blogs, roles: [ ROLE_ADMIN, ROLE_AGENT,ROLE_AGENCE ] } # Admin and Agent roles
        - { path: ^/address, roles: [ ROLE_ADMIN, ROLE_AGENT ] } # Admin and Agent roles
        - { path: ^/property, roles: [ ROLE_ADMIN, ROLE_AGENT,ROLE_AGENCE ] } # Admin and Agent roles
        - { path: ^/api, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: ROLE_ADMIN } # Admin access to all other pages



when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
